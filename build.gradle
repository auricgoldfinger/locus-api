apply plugin: 'io.codearte.nexus-staging'

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        // Android build
        classpath 'com.android.tools.build:gradle:' + ANDROID_PLUGIN_GRADLE

        // Kotlin
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:' + KOTLIN_VERSION

        // Dokka
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:' + KOTLIN_DOKKA

        // Nexus staging
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:' + GRADLE_NEXUS_STAGING
    }
}

// define global parameters
allprojects {
    repositories {
        // local maven
        mavenLocal()

        // basic repositories
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

// Support for GitHub packages
// currently disabled as GP does not allow auth-less access to public packages (for now 05/2020)
// https://github.community/t5/GitHub-API-Development-and/Download-from-Github-Package-Registry-without-authentication/td-p/35255
//subprojects {
//    apply plugin: "maven-publish"
//    publishing {
//        repositories {
//            maven {
//                name = "GitHubPackages"
//                url = uri("https://maven.pkg.github.com/asamm/locus-api")
//                credentials {
//                    username = System.getenv("GH_USER")
//                    password = System.getenv("GH_PERSONAL_ACCESS_TOKEN")
//                }
//            }
//            maven {
//                name = 'CustomMavenRepo'
//                url = "file://${buildDir}/repo"
//            }
//        }
//    }
//}

ext {
    readPasswords = { final p ->
        final Properties props = new Properties()
        final def propFile = new File(projectDir,'signing.properties')

        logger.lifecycle("\treading password from file {}",propFile.absolutePath)

        if (!propFile.exists()) {
            // create properties file
            logger.error("signing.properties doesn't exist, creating dummy file")
            logger.error("Please enter the values and retry")

            props.setProperty("STORE_FILE","enter path to keystore")
            props.setProperty("STORE_PASSWORD","enter keystore password")
            props.setProperty("KEY_ALIAS_DEBUG","enter debug key alias")
            props.setProperty("KEY_PASSWORD_DEBUG","enter debug key password")
            props.setProperty("KEY_ALIAS_RELEASE","enter release key alias")
            props.setProperty("KEY_PASSWORD_RELEASE","enter release key password")

            props.store(new FileOutputStream(propFile), null)

            logger.error("{} created", propFile.absolutePath)
        }
        if (propFile.canRead()) {
            props.load(new FileInputStream(propFile))
            logger.lifecycle("\tpassword info read from properties file")

            if (props['STORE_FILE']) {
                logger.lifecycle("\tUsing store file {}", props['STORE_FILE'])
            } else {
                logger.error("\tSTORE_FILE property not found")
            }

        } else {
            logger.error("\tProperties file couldn't be read")
        }

        return props
    }
}
final Properties signingProperties = readPasswords();

configure([
        project(":locus-api-android-sample")]) {

    apply plugin: 'com.android.application'
    apply plugin: "kotlin-android"

    android {
        // setup SDK
        compileSdkVersion Integer.valueOf(PARAM_COMPILE_SDK_VERSION)
        buildToolsVersion ANDROID_BUILD_TOOLS

        defaultConfig {
            minSdkVersion Integer.valueOf(PARAM_MIN_SDK_VERSION)
            targetSdkVersion Integer.valueOf(PARAM_TARGET_SDK_VERSION)
        }

        dexOptions {
            jumboMode true
        }

        packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // enable lint in project
        lintOptions {
            checkReleaseBuilds true
            abortOnError true
            absolutePaths false
            lintConfig file("../lint-global.xml")
        }

        // signing of versions
        signingConfigs {
            debug {
                storeFile file(signingProperties['STORE_FILE'])
                storePassword signingProperties['STORE_PASSWORD']
                keyAlias signingProperties['KEY_ALIAS_DEBUG']
                keyPassword signingProperties['KEY_PASSWORD_DEBUG']
                v2SigningEnabled true
            }
            release {
                storeFile file(signingProperties['STORE_FILE'])
                storePassword signingProperties['STORE_PASSWORD']
                keyAlias signingProperties['KEY_ALIAS_RELEASE']
                keyPassword signingProperties['KEY_PASSWORD_RELEASE']
                v2SigningEnabled true
            }
        }

        // building task
        buildTypes {
            debug {
                signingConfig signingConfigs.debug
            }
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    // iterate over all versions
    android.applicationVariants.all { variant ->

        // define base parameters
        println "Config for: " + build

        // rename result file
        variant.outputs.all {
            // generate base name
            def newName = variant.name.capitalize()
            // remove from 'LocusFreeSamsungDebug', last work 'Debug'
            newName = newName.substring(0, newName.length() - variant.buildType.name.length())
            // create full name like 'LocusFreeSamsung_342_3.5.2_debug.apk'
            def baseFileName = "${newName}_${variant.versionCode}_${variant.versionName}_${variant.buildType.name}"
            // set new output file name
            outputFileName = "${baseFileName}.apk"
        }

        // create also release task for "release builds"
        variant.productFlavors.each { flavor ->
            // do not handle certain flavors at all
            def flavorName = flavor.name.capitalize()
            if (flavor.name == '') {
                return;
            }

            // skip invalid build types (so generate only releases versions)
            if (variant.buildType.name != 'release') {
                return;
            }

            // create task for release
            tasks.create(name: variant.buildType.name + flavorName,
                    dependsOn: variant.assemble) {
                group 'Publish'
                description "Assembles and archives $flavorName and its proguard mapping for the $build build"
            }
        }
    }
}
